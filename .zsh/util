ZSH_UTIL_INDENT=""

###
# See if we can use colors.

autoload colors zsh/terminfo
if [[ -n "$terminfo[colors]" ]]; then
  if [[ "$terminfo[colors]" -ge 8 ]]; then
    colors
  fi
  for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
    eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
    eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
  done
  PR_NO_COLOUR="%{$terminfo[sgr0]%}"
else
  # no terminfo... let's assume!
  PR_RED="%{[1;31m%}"
  PR_LIGHT_RED="%{[31m%}"
  PR_GREEN="%{[1;32m%}"
  PR_LIGHT_GREEN="%{[32m%}"
  PR_YELLOW="%{[1;33m%}"
  PR_LIGHT_YELLOW="%{[33m%}"
  PR_BLUE="%{[1;34m%}"
  PR_LIGHT_BLUE="%{[34m%}"
  PR_MAGENTA="%{[1;35m%}"
  PR_LIGHT_MAGENTA="%{[35m%}"
  PR_CYAN="%{[1;36m%}"
  PR_LIGHT_CYAN="%{[36m%}"
  PR_WHITE="%{[1;37m%}"
  PR_LIGHT_WHITE="%{[37m%}"
  PR_NO_COLOUR="%{[0m%}"
fi

function collect_args {
  local f=""
  local m=""
  local argsdone=0

  while [[ $# > 0 ]]; do
    if [[ "$1" == -- ]]; then
      argsdone=1;
    elif [[ $argsdone == 0 && "$1" == -* ]]; then
      f="$f $1"
    else
      m="$m $1"
    fi
    shift
  done

  print "local f=\"$f\"\nlocal m=\"$m\""
}

function doindent {
  ZSH_UTIL_INDENT="  ${ZSH_UTIL_INDENT}"
}

function dooutdent {
  ZSH_UTIL_INDENT="${ZSH_UTIL_INDENT/??/}"
}

function print_err {
  eval $( collect_args "$@" )
  print ${(z)f} " ${terminfo[bold]}${fg[red]}*${terminfo[sgr0]}${ZSH_UTIL_INDENT}$m"
}

function print_warn {
  eval $( collect_args "$@" )
  print ${(z)f} " ${terminfo[bold]}${fg[yellow]}*${terminfo[sgr0]}${ZSH_UTIL_INDENT}$m"
}

function print_ok {
  eval $( collect_args "$@" )
  print ${(z)f} " ${terminfo[bold]}${fg[green]}*${terminfo[sgr0]}${ZSH_UTIL_INDENT}$m"
}

function print_info {
  eval $( collect_args "$@" )
  print ${(z)f} "${terminfo[bold]}${fg[green]}>>>${terminfo[sgr0]}${ZSH_UTIL_INDENT}$m"
}

function print_debug {
  eval $( collect_args "$@" )
  print ${(z)f} "${terminfo[bold]}${fg[cyan]}>>>${terminfo[sgr0]}${ZSH_UTIL_INDENT}$m"
}

function print_trace {
  [[ -z "${ZSH_DO_TRACE}" ]] && return
  eval $( collect_args "$@" )
  local oldfmt=${$(typeset -p SECONDS)[2]}
  # only six decimal place resolution for SECONDS
  typeset -F 6 SECONDS
  print ${(z)f} "${terminfo[bold]}${fg[magenta]}>>>${terminfo[sgr0]} [${SECONDS}]${ZSH_UTIL_INDENT}$m"
  typeset ${oldfmt[1,2]} ${oldfmt[3,20]} SECONDS
}

function failif {
  if eval "[[ $1 ]]"; then
    shift
    print_err "$@"
    return
  fi
  return 1
}

function warnif {
  if eval "[[ $1 ]]"; then
    shift
    print_warn "$@"
    return
  fi
  return 1
}

# vim: ft=zsh et ts=2 sw=2
