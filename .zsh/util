ZSH_UTIL_INDENT=""

function collect_args {
  local f=""
  local m=""
  local argsdone=0

  while [[ $# > 0 ]]; do
    if [[ "$1" == -- ]]; then
      argsdone=1;
    elif [[ $argsdone == 0 && "$1" == -* ]]; then
      f="$f $1"
    else
      m="$m $1"
    fi
    shift
  done

  print "local f=\"$f\"\nlocal m=\"$m\""
}

function doindent {
  ZSH_UTIL_INDENT="  ${ZSH_UTIL_INDENT}"
}

function dooutdent {
  ZSH_UTIL_INDENT="${ZSH_UTIL_INDENT/??/}"
}

function print_err {
  eval $( collect_args "$@" )
  print ${(z)f} " \e[1;31m*\e[m${ZSH_UTIL_INDENT}$m"
}

function print_warn {
  eval $( collect_args "$@" )
  print ${(z)f} " \e[1;33m*\e[m${ZSH_UTIL_INDENT}$m"
}

function print_ok {
  eval $( collect_args "$@" )
  print ${(z)f} " \e[1;32m*\e[m${ZSH_UTIL_INDENT}$m"
}

function print_info {
  eval $( collect_args "$@" )
  print ${(z)f} "\e[1;32m>>>\e[m${ZSH_UTIL_INDENT}$m"
}

function print_debug {
  eval $( collect_args "$@" )
  print ${(z)f} "\e[1;36m>>>\e[m${ZSH_UTIL_INDENT}$m"
}

function print_trace {
  [[ -z "${ZSH_DO_TRACE}" ]] && return
  eval $( collect_args "$@" )
  local oldfmt=${$(typeset -p SECONDS)[2]}
  # only six decimal place resolution for SECONDS
  typeset -F 6 SECONDS
  print ${(z)f} "\e[1;35m>>>\e[m [${SECONDS}]${ZSH_UTIL_INDENT}$m"
  typeset ${oldfmt[1,2]} ${oldfmt[3,20]} SECONDS
}

function failif {
  if eval "[[ $1 ]]"; then
    shift
    print_err "$@"
    return
  fi
  return 1
}

function warnif {
  if eval "[[ $1 ]]"; then
    shift
    print_warn "$@"
    return
  fi
  return 1
}

# vim: ft=zsh et ts=2 sw=2
